"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@visionz";
exports.ids = ["vendor-chunks/@visionz"];
exports.modules = {

/***/ "(ssr)/./node_modules/@visionz/upload-helper-react/dist/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@visionz/upload-helper-react/dist/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getVisionZFile: () => (/* binding */ getFileUrl),\n/* harmony export */   getVisionZFiles: () => (/* binding */ getFileUrlBulk),\n/* harmony export */   useVisionZMultipleUpload: () => (/* binding */ useVisionZMultipleUpload),\n/* harmony export */   useVisionZUpload: () => (/* binding */ useVisionZUpload)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/lib/axios.js\");\n// src/useUpload.ts\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nfunction _ts_generator(thisArg, body) {\n    var f, y, t, g, _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    };\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\n\n// src/clientApiFunctions.ts\n\nvar requestUpload = function() {\n    var _ref = _async_to_generator(function(apiPath, req) {\n        return _ts_generator(this, function(_state) {\n            return [\n                2,\n                axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(apiPath, _object_spread({\n                    type: \"requestUpload\" /* RequestUpload */ \n                }, req)).then(function(res) {\n                    return res.data;\n                })\n            ];\n        });\n    });\n    return function requestUpload(apiPath, req) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar notifyUploadComplete = function() {\n    var _ref = _async_to_generator(function(apiPath, req) {\n        return _ts_generator(this, function(_state) {\n            return [\n                2,\n                axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(apiPath, _object_spread({\n                    type: \"notifyUploadComplete\" /* NotifyUploadComplete */ \n                }, req)).then(function(res) {\n                    return res.data;\n                })\n            ];\n        });\n    });\n    return function notifyUploadComplete(apiPath, req) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar getFileUrl = function() {\n    var _ref = _async_to_generator(function(apiPath, uploadId) {\n        return _ts_generator(this, function(_state) {\n            return [\n                2,\n                axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(apiPath, {\n                    type: \"getFileUrl\" /* GetFileUrl */ ,\n                    uploadId: uploadId\n                }).then(function(res) {\n                    return res.data.fileUrl;\n                })\n            ];\n        });\n    });\n    return function getFileUrl(apiPath, uploadId) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar getFileUrlBulk = function() {\n    var _ref = _async_to_generator(function(apiPath, uploadIds) {\n        var getFilePromises, i, batchIds;\n        return _ts_generator(this, function(_state) {\n            getFilePromises = [];\n            for(i = 0; i < uploadIds.length; i = i + 100){\n                batchIds = uploadIds.slice(i, i + 100);\n                getFilePromises.push(axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(apiPath, {\n                    type: \"getFileUrlBulk\" /* GetFileUrlBulk */ ,\n                    uploadIds: batchIds\n                }).then(function(res) {\n                    return res.data;\n                }));\n            }\n            return [\n                2,\n                Promise.all(getFilePromises).then(function(resolved) {\n                    return resolved.flat();\n                })\n            ];\n        });\n    });\n    return function getFileUrlBulk(apiPath, uploadIds) {\n        return _ref.apply(this, arguments);\n    };\n}();\n// src/useUpload.ts\n\nvar useVisionZUpload = function(apiPath) {\n    var _useState = _sliced_to_array((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), 2), isUploading = _useState[0], setIsUploading = _useState[1];\n    var _useState1 = _sliced_to_array((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), 2), selectedFile = _useState1[0], setSelectedFile = _useState1[1];\n    var onFileChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(file) {\n        if (isUploading) {\n            throw new Error(\"An upload is in progress\");\n        }\n        setSelectedFile(file || null);\n    }, [\n        isUploading\n    ]);\n    var uploadSelectedFile = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(/*#__PURE__*/ _async_to_generator(function() {\n        var name, size, _ref, pendingUploadId, preSignedUrl;\n        return _ts_generator(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    if (isUploading) {\n                        throw new Error(\"An upload is in progress\");\n                    }\n                    if (!selectedFile) {\n                        throw new Error(\"No file is selected\");\n                    }\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        ,\n                        5,\n                        6\n                    ]);\n                    setIsUploading(true);\n                    name = selectedFile.name, size = selectedFile.size;\n                    return [\n                        4,\n                        requestUpload(apiPath, {\n                            fileName: name,\n                            fileSizeInByte: size\n                        })\n                    ];\n                case 2:\n                    _ref = _state.sent(), pendingUploadId = _ref.pendingUploadId, preSignedUrl = _ref.preSignedUrl;\n                    return [\n                        4,\n                        axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].put(preSignedUrl, selectedFile)\n                    ];\n                case 3:\n                    _state.sent();\n                    return [\n                        4,\n                        notifyUploadComplete(apiPath, {\n                            pendingUploadId: pendingUploadId\n                        })\n                    ];\n                case 4:\n                    return [\n                        2,\n                        _state.sent().uploadId\n                    ];\n                case 5:\n                    setSelectedFile(null);\n                    setIsUploading(false);\n                    return [\n                        7\n                    ];\n                case 6:\n                    return [\n                        2\n                    ];\n            }\n        });\n    }), [\n        apiPath,\n        isUploading,\n        selectedFile\n    ]);\n    return {\n        onFileChange: onFileChange,\n        uploadSelectedFile: uploadSelectedFile,\n        isUploading: isUploading,\n        selectedFile: selectedFile\n    };\n};\n// src/useMultipleUpload.ts\n\n\nvar useVisionZMultipleUpload = function(apiPath) {\n    var _useState2 = _sliced_to_array((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), 2), isUploading = _useState2[0], setIsUploading = _useState2[1];\n    var _useState21 = _sliced_to_array((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), 2), selectedFiles = _useState21[0], setSelectedFiles = _useState21[1];\n    var onFilesChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(files) {\n        if (isUploading) {\n            throw new Error(\"An upload is in progress\");\n        }\n        setSelectedFiles(files || []);\n    }, [\n        isUploading\n    ]);\n    var uploadSelectedFiles = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(/*#__PURE__*/ _async_to_generator(function() {\n        var uploadPromises;\n        return _ts_generator(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    if (isUploading) {\n                        throw new Error(\"An upload is in progress\");\n                    }\n                    if (!selectedFiles || !selectedFiles.length) {\n                        throw new Error(\"No file is selected\");\n                    }\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        ,\n                        3,\n                        4\n                    ]);\n                    setIsUploading(true);\n                    uploadPromises = selectedFiles.map(function() {\n                        var _ref = _async_to_generator(function(selectedFile) {\n                            var name, size, _ref, pendingUploadId, preSignedUrl;\n                            return _ts_generator(this, function(_state) {\n                                switch(_state.label){\n                                    case 0:\n                                        name = selectedFile.name, size = selectedFile.size;\n                                        return [\n                                            4,\n                                            requestUpload(apiPath, {\n                                                fileName: name,\n                                                fileSizeInByte: size\n                                            })\n                                        ];\n                                    case 1:\n                                        _ref = _state.sent(), pendingUploadId = _ref.pendingUploadId, preSignedUrl = _ref.preSignedUrl;\n                                        return [\n                                            4,\n                                            axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].put(preSignedUrl, selectedFile)\n                                        ];\n                                    case 2:\n                                        _state.sent();\n                                        return [\n                                            4,\n                                            notifyUploadComplete(apiPath, {\n                                                pendingUploadId: pendingUploadId\n                                            })\n                                        ];\n                                    case 3:\n                                        return [\n                                            2,\n                                            _state.sent().uploadId\n                                        ];\n                                }\n                            });\n                        });\n                        return function(selectedFile) {\n                            return _ref.apply(this, arguments);\n                        };\n                    }());\n                    return [\n                        4,\n                        Promise.all(uploadPromises)\n                    ];\n                case 2:\n                    return [\n                        2,\n                        _state.sent()\n                    ];\n                case 3:\n                    setSelectedFiles([]);\n                    setIsUploading(false);\n                    return [\n                        7\n                    ];\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    }), [\n        apiPath,\n        isUploading,\n        selectedFiles\n    ]);\n    return {\n        onFilesChange: onFilesChange,\n        uploadSelectedFiles: uploadSelectedFiles,\n        isUploading: isUploading,\n        selectedFiles: selectedFiles\n    };\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@visionz/upload-helper-react/dist/index.mjs\n");

/***/ })

};
;